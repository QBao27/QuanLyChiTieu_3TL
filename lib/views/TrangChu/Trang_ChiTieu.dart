import 'package:flutter/material.dart';
import 'package:intl/intl.dart';

class ThemChiTieu extends StatefulWidget {
  const ThemChiTieu({super.key});

  @override
  State<ThemChiTieu> createState() => _ThemChiTieuState();
}

class _ThemChiTieuState extends State<ThemChiTieu> {
  int selectedIndex = -1;

  void _onIconPressed(int idx) {
    setState(() => selectedIndex = idx);
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (_) => const _CustomKeyboardSheet(),
    ).whenComplete(() {
      setState(() {
        selectedIndex = -1;
      });
    });
  }

  /// üé® HEX map cho t·ª´ng m·ª•c
  final Map<String, String> iconColors = {
    'Mua s·∫Øm': '#448AFF',
    'ƒê·ªì ƒÉn': '#FFB74D',
    'ƒêi·ªán tho·∫°i': '#3F51B5',
    'Gi·∫£i tr√≠': '#9C27B0',
    'Gi√°o d·ª•c': '#FFC107',
    'S·∫Øc ƒë·∫πp': '#FF4081',
    'Th·ªÉ thao': '#4CAF50',
    'X√£ h·ªôi': '#009688',
    'V·∫≠n t·∫£i': '#795548',
    'Qu·∫ßn √°o': '#FF5722',
    'Xe h∆°i': '#9E9E9E',
    'R∆∞·ª£u bia': '#F44336',
    'Thu·ªëc l√°': '#757575',
    'Thi·∫øt b·ªã': '#03A9F4',
    'Du l·ªãch': '#00BCD4',
    'S·ª©c kh·ªèe': '#69F0AE',
    'Th√∫ c∆∞ng': '#7C4DFF',
    'S·ª≠a ch·ªØa': '#CDDC39',
    'Nh√† ·ªü': '#607D8B',
    'Qu√† t·∫∑ng': '#F44336',
    'Quy√™n g√≥p': '#8BC34A',
    'V√© s·ªë': '#FF7043',
    'ƒê·ªì ƒÉn nh·∫π': '#FF9800',
    'Tr·∫ª em': '#FFEB3B',
    'Rau c·ªß': '#B2FF59',
    'Hoa qu·∫£': '#E91E63',
    'H√≥a ƒë∆°n': '#2196F3',
    'Kh√°c': '#9E9E9E',
  };

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: const EdgeInsets.symmetric(vertical: 20, horizontal: 12),
      child: SingleChildScrollView(
        child: Column(
          children: List.generate(7, (row) {
            final start = row * 4;
            return Container(
              margin: const EdgeInsets.only(bottom: 12),
              child: Row(
                children: List.generate(4, (col) {
                  final index = start + col;
                  final iconList = [
                    Icons.shopping_cart_outlined,
                    Icons.restaurant_outlined,
                    Icons.phone_android_outlined,
                    Icons.headset_mic_rounded,
                    Icons.book_online,
                    Icons.brush_outlined,
                    Icons.directions_bike_outlined,
                    Icons.people_alt_outlined,
                    Icons.directions_bus_outlined,
                    Icons.checkroom_rounded,
                    Icons.directions_car_filled_outlined,
                    Icons.liquor_outlined,
                    Icons.all_inbox_outlined,
                    Icons.computer_outlined,
                    Icons.flight_outlined,
                    Icons.health_and_safety_outlined,
                    Icons.pets_outlined,
                    Icons.build_outlined,
                    Icons.home_outlined,
                    Icons.card_giftcard_outlined,
                    Icons.favorite_border_outlined,
                    Icons.confirmation_num_outlined,
                    Icons.fastfood_outlined,
                    Icons.child_care_outlined,
                    Icons.eco_outlined,
                    Icons.local_florist_outlined,
                    Icons.receipt_outlined,
                    Icons.more_horiz_outlined,
                  ];
                  final labelList = [
                    'Mua s·∫Øm',
                    'ƒê·ªì ƒÉn',
                    'ƒêi·ªán tho·∫°i',
                    'Gi·∫£i tr√≠',
                    'Gi√°o d·ª•c',
                    'S·∫Øc ƒë·∫πp',
                    'Th·ªÉ thao',
                    'X√£ h·ªôi',
                    'V·∫≠n t·∫£i',
                    'Qu·∫ßn √°o',
                    'Xe h∆°i',
                    'R∆∞·ª£u bia',
                    'Thu·ªëc l√°',
                    'Thi·∫øt b·ªã',
                    'Du l·ªãch',
                    'S·ª©c kh·ªèe',
                    'Th√∫ c∆∞ng',
                    'S·ª≠a ch·ªØa',
                    'Nh√† ·ªü',
                    'Qu√† t·∫∑ng',
                    'Quy√™n g√≥p',
                    'V√© s·ªë',
                    'ƒê·ªì ƒÉn nh·∫π',
                    'Tr·∫ª em',
                    'Rau c·ªß',
                    'Hoa qu·∫£',
                    'H√≥a ƒë∆°n',
                    'Kh√°c',
                  ];
                  return index < iconList.length
                      ? buildIconButton(index, iconList[index], labelList[index])
                      : const Expanded(child: SizedBox());
                }),
              ),
            );
          }),
        ),
      ),
    );
  }

  /// ‚úÖ H√†m convert HEX -> Color
  Color _hexToColor(String hex) {
    return Color(int.parse(hex.replaceFirst('#', '0xFF')));
  }

  Expanded buildIconButton(int index, IconData icon, String label) {
    final hex = iconColors[label] ?? '#9E9E9E';
    final color = _hexToColor(hex);

    return Expanded(
      child: Column(
        children: [
          IconButton(
            style: IconButton.styleFrom(
              backgroundColor: selectedIndex == index
                  ? Colors.yellow[700]
                  : color.withOpacity(0.2),
              shape: const CircleBorder(),
              padding: const EdgeInsets.all(15),
            ),
            icon: Icon(icon, color: color),
            onPressed: () => _onIconPressed(index),
          ),
          const SizedBox(height: 4),
          Text(label, textAlign: TextAlign.center),
        ],
      ),
    );
  }
}

/// =============================
/// Custom Keyboard Bottom Sheet
/// =============================
class _CustomKeyboardSheet extends StatefulWidget {
  const _CustomKeyboardSheet({Key? key}) : super(key: key);

  @override
  State<_CustomKeyboardSheet> createState() => _CustomKeyboardSheetState();
}

class _CustomKeyboardSheetState extends State<_CustomKeyboardSheet> {
  String amount = '0';
  final _noteCtr = TextEditingController();
  final currencyFormat = NumberFormat.decimalPattern('vi');

  void _append(String x) {
    String clean = amount.replaceAll('.', '');
    if (clean.length >= 10) return;
    setState(() {
      clean = clean == '0' ? x : clean + x;
      amount = currencyFormat.format(int.parse(clean)).replaceAll(',', '.');
    });
  }

  void _backspace() {
    String clean = amount.replaceAll('.', '');
    if (clean.length <= 1) {
      setState(() => amount = '0');
      return;
    }
    clean = clean.substring(0, clean.length - 1);
    setState(() {
      amount = currencyFormat.format(int.parse(clean)).replaceAll(',', '.');
    });
  }

  @override
  Widget build(BuildContext context) {
    return DraggableScrollableSheet(
      initialChildSize: 0.5,
      maxChildSize: 0.9,
      builder: (_, ctrl) => Container(
        decoration: const BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
        ),
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
        child: Column(
          children: [
            Row(
              children: [
                ElevatedButton(
                  onPressed: () {
                    FocusScope.of(context).unfocus();
                    Navigator.of(context).pop();
                  },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.grey[200],
                    foregroundColor: Colors.black,
                    textStyle: const TextStyle(fontSize: 16),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),
                  child: const Text('H·ªßy'),
                ),
                const Spacer(),
                Text(
                  amount,
                  style: const TextStyle(
                    fontSize: 36,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 8),
            TextField(
              controller: _noteCtr,
              decoration: InputDecoration(
                hintText: 'Ghi ch√∫: Nh·∫≠p ghi ch√∫...',
                filled: true,
                fillColor: Colors.grey[200],
                border: OutlineInputBorder(
                  borderSide: BorderSide.none,
                  borderRadius: BorderRadius.circular(12),
                ),
              ),
            ),
            const SizedBox(height: 12),
            Expanded(
              child: GridView.count(
                controller: ctrl,
                crossAxisCount: 4,
                mainAxisSpacing: 8,
                crossAxisSpacing: 8,
                children: [
                  for (var k in [
                    '7',
                    '8',
                    '9',
                    '‚å´',
                    '4',
                    '5',
                    '6',
                    '‚úì',
                    '1',
                    '2',
                    '3',
                    '0',
                  ])
                    _buildKey(k),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildKey(String label) {
    final isCheck = label == '‚úì';
    final isBackspace = label == '‚å´';

    return ElevatedButton(
      onPressed: () {
        switch (label) {
          case '‚å´':
            _backspace();
            break;
          case '‚úì':
            Navigator.of(context).pop();
            break;
          default:
            if (RegExp(r"^\d$|'$").hasMatch(label)) _append(label);
        }
      },
      style: ElevatedButton.styleFrom(
        backgroundColor: isCheck ? Colors.yellow[700] : Colors.grey[200],
        foregroundColor: Colors.black,
        textStyle: const TextStyle(fontSize: 22),
        minimumSize: const Size(50, 50),
        padding: const EdgeInsets.symmetric(vertical: 12),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      ),
      child: isCheck
          ? const Icon(Icons.check, size: 32, color: Colors.black)
          : isBackspace
          ? const Icon(Icons.backspace, size: 28)
          : Text(label),
    );
  }
}
